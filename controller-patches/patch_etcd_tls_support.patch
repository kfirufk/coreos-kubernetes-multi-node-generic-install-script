--- controller-install.sh.orig	2016-12-17 10:56:30.000000000 +0000
+++ controller-install.sh	2016-12-17 10:56:22.000000000 +0000
@@ -1,9 +1,30 @@
 #!/bin/bash
 set -e
 
+# https://quay.io/repository/calico/node image version
+export CALICO_NODE_VER=v1.0.0
+
 # List of etcd servers (http://ip:port), comma separated
 export ETCD_ENDPOINTS=
 
+# Should etcd tls certificates should be enabled to connect to etcd servers
+export ETCD_CLIENT_CERT_AUTH=true
+
+# etcd certificate file
+export ETCD_CERT_FILE="/etc/ssl/etcd/etcd1.pem"
+
+# etcd key file
+export ETCD_KEY_FILE="/etc/ssl/etcd/etcd1-key.pem"
+
+# etcd CA certificate
+export ETCD_TRUSTED_CA_FILE="/etc/ssl/etcd/ca.pem"
+
+# etcd certificates root directory
+export ETCD_CERT_ROOT_DIR="/etc/ssl/etcd"
+
+# etcd scheme
+export ETCD_SCHEME="https"
+
 # Specify the version (vX.Y.Z) of Kubernetes assets to deploy
 export K8S_VER=v1.5.1_coreos.0
 
@@ -75,9 +96,16 @@
         IFS=',' read -ra ES <<< "$ETCD_ENDPOINTS"
         for ETCD in "${ES[@]}"; do
             echo "Trying: $ETCD"
-            if [ -n "$(curl --silent "$ETCD/v2/machines")" ]; then
+            if [ "$ETCD_CLIENT_CERT_AUTH" = true ]; then
+             if [ -n "$(curl --cacert $ETCD_TRUSTED_CA_FILE --key $ETCD_KEY_FILE --cert $ETCD_CERT_FILE --silent "$ETCD/v2/machines")" ]; then
                 local ACTIVE_ETCD=$ETCD
                 break
+             fi
+            else
+             if [ -n "$(curl --silent "$ETCD/v2/machines")" ]; then
+                local ACTIVE_ETCD=$ETCD
+                break
+             fi
             fi
             sleep 1
         done
@@ -85,7 +113,12 @@
             break
         fi
     done
-    RES=$(curl --silent -X PUT -d "value={\"Network\":\"$POD_NETWORK\",\"Backend\":{\"Type\":\"vxlan\"}}" "$ACTIVE_ETCD/v2/keys/coreos.com/network/config?prevExist=false")
+    RES="";
+    if [ "$ETCD_CLIENT_CERT_AUTH" = true ]; then
+    RES=$(curl --silent --cacert $ETCD_TRUSTED_CA_FILE --key $ETCD_KEY_FILE --cert $ETCD_CERT_FILE -X PUT -d "value={\"Network\":\"$POD_NETWORK\",\"Backend\":{\"Type\":\"vxlan\"}}" "$ACTIVE_ETCD/v2/keys/coreos.com/network/config?prevExist=false")
+    else
+     RES=$(curl --silent -X PUT -d "value={\"Network\":\"$POD_NETWORK\",\"Backend\":{\"Type\":\"vxlan\"}}" "$ACTIVE_ETCD/v2/keys/coreos.com/network/config?prevExist=false")
+    fi
     if [ -z "$(echo $RES | grep '"action":"create"')" ] && [ -z "$(echo $RES | grep 'Key already exists')" ]; then
         echo "Unexpected error configuring flannel pod network: $RES"
     fi
@@ -835,6 +868,9 @@
 data:
   # Configure this with the location of your etcd cluster.
   etcd_endpoints: "${ETCD_ENDPOINTS}"
+  etcd_ca: "${ETCD_TRUSTED_CA_FILE}"
+  etcd_key: "${ETCD_KEY_FILE}"
+  etcd_cert: "${ETCD_CERT_FILE}"
 
   # The CNI network configuration to install on each node.  The special
   # values in this config will be automatically populated.
@@ -845,6 +881,9 @@
         "delegate": {
           "type": "calico",
           "etcd_endpoints": "__ETCD_ENDPOINTS__",
+          "etcd_ca": "${ETCD_TRUSTED_CA_FILE}"
+          "etcd_key": "${ETCD_KEY_FILE}"
+          "etcd_cert": "${ETCD_CERT_FILE}"
           "log_level": "info",
           "policy": {
               "type": "k8s",
@@ -889,7 +928,7 @@
         # container programs network policy and routes on each
         # host.
         - name: calico-node
-          image: quay.io/calico/node:v0.23.0
+          image: quay.io/calico/node:${CALICO_NODE_VER}
           env:
             # The location of the Calico etcd cluster.
             - name: ETCD_ENDPOINTS
